import socket
import random
import math

shell.prefix("set -euo pipefail")


configfile: "config.yaml"


HOSTNAME = socket.gethostname()
if HOSTNAME == "":
    HOSTNAME = "NA"
print(HOSTNAME)

NUM_QUERIES = 1000000
STREAMING_NUM_SEQUENCES = 10000
STREAMING_SEQUENCES_LENGTH = 300

GET_QUERIES = "../../scripts/get_queries.py"
#GET_QUERIES_STREAMING = "../../scripts/get_streaming_queries.py"
WGSIM = "../../wgsim/wgsim"

SUBSAMPLED_DIR = "../../data/subsampled"

# PATH TO PROGRAMS
CAMEL = "../../kmercamel/kmercamel"
FMSI = "../../fmsi/fmsi"
PROPHASM = "../../prophasm/prophasm"
BWA = "../../bwa/bwa"
SBWT = "../../SBWT/build/bin/sbwt"

# DEFAULT PARAMS OF PROGRAMS
SBWT_VARIANT = "plain-matrix"  # choosing the default variant now as it achieves the best query times in SBWT paper; for index size: "rrr-subsetwt" has nearly as small index as "mef-concat", but the latter produces a warning on kamenac
# SBWT variant: not with Elias-Fano "WARNING: This program was compiled for a CPU without support for the BMI2 instruction set. The performance of the Elias-Fano variants will be very bad."
SBWT_VARIANT_MEM = "rrr-split"  # one of the most memory efficient variant that has the best query time among the most memory-efficient variants (according to the SBWT paper)
SBWT_TMP_DIR = "sbwt-tmp/" #/tmp/ -- PV: note: do not use /tmp/ on servers as they have limited root dist
SBWT_RAM = "60" # SBWT -m param.: "RAM budget in gigabytes (not strictly enforced). Must be at least 2. (default: 2)"
CBL_PREF = "../../CBL/target.k_" # NOTE: CBL is compiled for every k separately
CBL_SUFF = "/release/examples/cbl"
BWA_PARAM_W = 999999
SSHASH = "../../sshash/build/sshash"
NUM_THREADS = 1 # NOTE: using only 1 thread for SBWT, even though they can use more threads (for query or index building, resp., but not both)

# 
D_VALS = [1]
K_VALS = [15, 23, 31] # limiting values of k for now #TODO add 15 and 31
R_VALS = ["0.1", "1.0"] # currently for E.coli
CAMEL_ALGS = ["global", "local"]
GENOMES_SUBSAMPLED = ["spneumo_pangenome_k32", "escherichia_coli.k63", "sars-cov-2_pangenome_k32"] # file {g}.fa.xz, which contains the non-subsampled dataset, assumed to be in the same dir as this Snakefile 
# OMITTED: "spneumoniae", 

if config["testing"]:
    D_VALS = [1]
    K_VALS = [23]
    R_VALS = ["0.1"]
    testing_suffix = "__test"
else:
    testing_suffix = ""

#TODO try to simplify
### All combination of params to be tested
prefs_MS_comp_rates = set()
prefs_MS_comp = set()
prefs_SPSS_comp_rates = set()
prefs_SPSS_comp = set()
prefs_SBWT_comp_rates = set()
prefs_SBWT_comp = set()
prefs_none_comp_rates = set()
prefs_none_comp = set()
for g in GENOMES_SUBSAMPLED:
    for S in CAMEL_ALGS:
        for k in K_VALS:
            for d in filter(lambda d: d < k, D_VALS): # filter out d larger than k
                # here we can remove unwanted combinations / replace non-sense combinations of params
                if S in ["global", "streaming", "globalAC"]:
                    d = "na"
                prefs_MS_comp.add(f"{g}.r_1.0.S_{S}.k_{k}.d_{d}")
                for r in R_VALS:
                    prefs_MS_comp_rates.add(f"{g}.r_{r}.S_{S}.k_{k}.d_{d}")
    for k in K_VALS:
        prefs_SPSS_comp.add(f"{g}.r_1.0.S_prophasm.k_{k}.d_na")
        prefs_none_comp.add(f"{g}.r_1.0.S_none.k_{k}.d_na")
        prefs_SBWT_comp.add(f"{g}.r_1.0.S_none.k_{k}.d_0")
        prefs_SBWT_comp.add(f"{g}.r_1.0.S_none.k_{k}.d_1") # two variants of SBWT
        for r in R_VALS:
            prefs_SPSS_comp_rates.add(f"{g}.r_{r}.S_prophasm.k_{k}.d_na")
            prefs_none_comp_rates.add(f"{g}.r_{r}.S_none.k_{k}.d_na")
            prefs_SBWT_comp_rates.add(f"{g}.r_{r}.S_none.k_{k}.d_0")
            prefs_SBWT_comp_rates.add(f"{g}.r_{r}.S_none.k_{k}.d_1") # two variants of SBWT
prefs_MS_comp_rates = sorted(list(prefs_MS_comp_rates))
prefs_MS_comp = sorted(list(prefs_MS_comp))
prefs_SPSS_comp_rates = sorted(list(prefs_SPSS_comp_rates))
prefs_SPSS_comp = sorted(list(prefs_SPSS_comp))
prefs_SBWT_comp_rates = sorted(list(prefs_SBWT_comp_rates))
prefs_SBWT_comp = sorted(list(prefs_SBWT_comp))
prefs_none_comp_rates = sorted(list(prefs_none_comp_rates))
prefs_none_comp = sorted(list(prefs_none_comp))



print(f"Prefs for FMSI (based on MS): {prefs_MS_comp}")
print(f"Prefs for indexes on SPSS: {prefs_SPSS_comp}")
print(f"Prefs for SBWT: {prefs_SBWT_comp}")
print(f"Prefs for indexes on raw data: {prefs_none_comp}")

################################################################

rule all:
    input:
        f"99_results/exp_01_build_index_results.{HOSTNAME}.tsv", # FIXME: missing {testing_suffix}
        f"00_hw_info/{HOSTNAME}.txt",

rule aggregate_data:
    input:
        f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sshash_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/sshash_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
        f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv",
    output:
        f"99_results/exp_01_build_index_results.{HOSTNAME}.tsv",
    shell:
        """
        cd 99_results/
        Rscript aggregate_data.R
        """


#####################################################################################################
# AGGREGATE STATISTICS
#####################################################################################################


rule aggregate_size_stats:
    output:
        tsv=f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"80_size_stats/{HOSTNAME}/fmsi.{p}.stats.tsv" for p in prefs_MS_comp_rates],
        [f"80_size_stats/{HOSTNAME}/bwa.{p}.stats.tsv" for p in prefs_SPSS_comp_rates],
        [f"80_size_stats/{HOSTNAME}/sbwt.{p}.stats.tsv" for p in prefs_SBWT_comp_rates],
        [f"80_size_stats/{HOSTNAME}/cbl.{p}.stats.tsv" for p in prefs_none_comp_rates],
        [f"80_size_stats/{HOSTNAME}/sshash.{p}.stats.tsv" for p in prefs_SPSS_comp_rates],
    params:
        tsv=f"99_results/size_stats.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input}\\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """
        
rule aggregate_camel_memtime_stats:
    output:
        tsv=f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"02_camel_memtime/{HOSTNAME}/{p}.t_superstring.tsv" for p in prefs_MS_comp_rates],
    params:
        tsv=f"99_results/camel_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_fmsi_memtime_stats:
    output:
        tsv=f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"03_fmsi_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_MS_comp_rates],
    params:
        tsv=f"99_results/fmsi_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_fmsi_query_memtime_stats:
    output:
        tsv=f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_MS_comp_rates],
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_MS_comp_rates],
        [f"04_fmsi_query_memtime/{HOSTNAME}/{p}.t_Str.tsv" for p in prefs_MS_comp],
    params:
        tsv=f"99_results/fmsi_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_prophasm_memtime_stats:
    output:
        tsv=f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"06_prophasm_memtime/{HOSTNAME}/{p}.t_superstring.tsv" for p in prefs_SPSS_comp_rates],
    params:
        tsv=f"99_results/prophasm_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_bwa_memtime_stats:
    output:
        tsv=f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"15_bwa_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_SPSS_comp_rates],
    params:
        tsv=f"99_results/bwa_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_bwa_query_memtime_stats:
    output:
        tsv=f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_SPSS_comp_rates],
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_SPSS_comp_rates],
        [f"16_bwa_query_memtime/{HOSTNAME}/{p}.t_Str.tsv" for p in prefs_SPSS_comp],
    params:
        tsv=f"99_results/bwa_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_sshash_memtime_stats:
    output:
        tsv=f"99_results/sshash_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"26_sshash_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_SPSS_comp_rates],
    params:
        tsv=f"99_results/sshash_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_sshash_query_memtime_stats:
    output:
        tsv=f"99_results/sshash_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"27_sshash_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_SPSS_comp_rates],
        [f"27_sshash_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_SPSS_comp_rates],
        [f"27_sshash_query_memtime/{HOSTNAME}/{p}.t_Str.tsv" for p in prefs_SPSS_comp],
    params:
        tsv=f"99_results/sshash_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_cbl_memtime_stats:
    output:
        tsv=f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"21_cbl_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_none_comp_rates],
    params:
        tsv=f"99_results/cbl_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_cbl_query_memtime_stats:
    output:
        tsv=f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_none_comp_rates],
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_none_comp_rates],
        [f"22_cbl_query_memtime/{HOSTNAME}/{p}.t_Str.tsv" for p in prefs_none_comp],
    params:
        tsv=f"99_results/cbl_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

# TODO: we only take the stats for creating index w/o streaming support
rule aggregate_sbwt_memtime_stats:
    output:
        tsv=f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"11_sbwt_memtime/{HOSTNAME}/{p}.t_index.tsv" for p in prefs_SBWT_comp_rates],
    params:
        tsv=f"99_results/sbwt_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

rule aggregate_sbwt_query_memtime_stats:
    output:
        tsv=f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv",
    input:
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_Pos.tsv" for p in prefs_SBWT_comp_rates],
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_Neg.tsv" for p in prefs_SBWT_comp_rates],
        [f"12_sbwt_query_memtime/{HOSTNAME}/{p}.t_Str.tsv" for p in prefs_SBWT_comp],
    params:
        tsv=f"99_results/sbwt_query_memtime.{HOSTNAME}{testing_suffix}.tsv.tmp",
    priority: 50
    shell:
        """
        cat {input} \\
            | awk '!seen[$0]++' \\
            | tee {params.tsv} \\
            | python3 sort_output_tsv.py \\
            > {output.tsv}
        """

#####################################################################################################
# COMPUTE QUERY FILE
#####################################################################################################


rule compute_queries_positive:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True <(xzcat {input.fa}) >{output.q}
        """


rule compute_queries_positive_wRCs:
    input:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    output:
        q="42_query_fastas/{g}.r_{r}.k_{k}-queries-wRCs.fa",
    params:
        script="../../scripts/add_RCs_to_fasta.py",
    shell:
        """
        python3 {params.script} {input.q} {output.q}
        """
    # input:
    #     fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    # output:
    #     q="42_query_fastas/{g}.r_{r}.k_{k}-queries-wRCs.fa",
    # params:
    #     get_queries=GET_QUERIES,
    #     num_queries=NUM_QUERIES,
    # shell:
    #     """
    #     {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -print_RC True <(xzcat {input.fa}) >{output.q}
    #     """
        
rule compute_queries_negative:
    input:
        fa=f"GRCh38.p14.chromosome1.prefix2M.fasta",
        faExcl=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r1.0.fa.xz",
    output:
        q="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    params:
        get_queries=GET_QUERIES,
        num_queries=NUM_QUERIES,
    shell:
        """
        {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -e <(xzcat {input.faExcl}) {input.fa} >{output.q}
        """
rule compute_queries_negative_wRCs:
    input:
        q="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    output:
        q="42_query_fastas/{g}.k_{k}-queries-neg-wRCs.fa",
    params:
        script="../../scripts/add_RCs_to_fasta.py",
    shell:
        """
        python3 {params.script} {input.q} {output.q}
        """
    # input:
    #     fa=f"GRCh38.p14.chromosome1.prefix2M.fasta",
    #     faExcl=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r1.0.fa.xz",
    # output:
    #     q="42_query_fastas/{g}.k_{k}-queries-neg-wRCs.fa",
    # params:
    #     get_queries=GET_QUERIES,
    #     num_queries=NUM_QUERIES,
    # shell:
    #     """
    #     {params.get_queries} -k {wildcards.k} -cap {params.num_queries} -print_header True -print_RC True -e <(xzcat {input.faExcl}) {input.fa} >{output.q}
    #     """
        
rule compute_queries_streaming:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k31_r1.0.fa.xz",
    output:
        q="42_query_fastas/{g}-queries-str.fa",
    params:
        wgsim=WGSIM,
        #get_queries=GET_QUERIES_STREAMING,
        num_seq=STREAMING_NUM_SEQUENCES,
        seq_length=STREAMING_SEQUENCES_LENGTH,
        refGenomeFa="../../data/{g}-refGenome.fa",
        tmpOutput="{g}-queries-str.fq"
    shell:
        """
        {params.wgsim} -1{params.seq_length} -d0 -S42 -e0 -r0 -R0 -N{params.num_seq} {params.refGenomeFa} {params.tmpOutput} /dev/null
        seqtk seq -a {params.tmpOutput} >{output.q}
        rm {params.tmpOutput}
        """
        # {params.get_queries} -k {wildcards.k} -sequences {params.num_seq} -kmers_per_line {params.seq_length} -print_header True <(xzcat {input.fa}) >{output.q}

rule compute_queries_streaming_wRCs:
    input:
        q="42_query_fastas/{g}-queries-str.fa",
    output:
        q="42_query_fastas/{g}-queries-str-wRCs.fa",
    params:
        script="../../scripts/add_RCs_to_fasta.py",
    shell:
        """
        python3 {params.script} {input.q} {output.q}
        """

#####################################################################################################
# COUNT KMERS
#####################################################################################################

# HACK TO AVOID COUNTING K-MERS MORE TIMES: we assume that global is always run for every genome, rate, and k
rule count_kmers:
    output:
        txt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    input:
        txt="30_FMSIv02_index/{g}.r_{r}.S_global.k_{k}.d_na.fa",
    priority: 150
    shell:
        """
        ../../scripts/count_kmers.py -k {wildcards.k} -t -p {input.txt} > {output.txt}
        """


#####################################################################################################
# RUN CAMEL + FMSI
#####################################################################################################

# includes mask optimization
rule run_kmer_camel:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
        hw=f"00_hw_info/{HOSTNAME}.txt",
    output:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
        log0=f"02_camel_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_superstring.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        d_param=lambda wildcards: f"-d {wildcards.d}" if wildcards.d != "na" else "",
        tmpfa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}-no-opt.fa",
        camel=CAMEL,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" "{params.camel} -c -k {wildcards.k} {params.d_param} -p <(xzcat {input.fa}) -a {wildcards.S} >{params.tmpfa}; {params.camel} optimize -c -k {wildcards.k} -p {params.tmpfa} -a ones >{output.fa}; rm {params.tmpfa}"
        """

rule run_fmsi:
    input:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
    output:
        ac="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.ac",
        gt="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.gt",
        ac_gt="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.ac_gt",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.mask",
        misc="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.misc",
        log0=f"03_fmsi_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_index.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.fmsi} index -p {input.fa}" 
        """

rule run_fmsi_query_pos:
    input:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.mask",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    output:
        logPos=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_Pos.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.fmsi} query -p {input.fa} -q {input.qPos} -O -s >/dev/null 2>/dev/null" 
        """

rule run_fmsi_query_neg:
    input:
        fa="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.mask",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    output:
        logNeg=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_Neg.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.fmsi} query -p {input.fa} -q {input.qNeg} -O -s >/dev/null 2>/dev/null" 
        """

rule run_fmsi_query_str:
    input:
        fa="01_MS_index/{g}.r_1.0.S_{S}.k_{k}.d_{d}.fa",
        klcp="01_MS_index/{g}.r_1.0.S_{S}.k_{k}.d_{d}.fa.fmsi.klcp",
        mask="01_MS_index/{g}.r_1.0.S_{S}.k_{k}.d_{d}.fa.fmsi.mask",
        qStr="42_query_fastas/{g}-queries-str.fa",
    output:
        logStr=f"04_fmsi_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_{S}.k_{k}.d_{d}.t_Str.log",
    wildcard_constraints:
        S='|'.join(CAMEL_ALGS),
    params:
        fmsi=FMSI,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logStr}" \\
            "{params.fmsi} query -p {input.fa} -q {input.qStr} -O >/dev/null 2>/dev/null" 
        """

rule make_fmsi_stats:
    input:
        ac="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.ac",
        gt="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.gt",
        ac_gt="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.ac_gt",
        klcp="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.klcp",
        mask="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.mask",
        misc="01_MS_index/{g}.r_{r}.S_{S}.k_{k}.d_{d}.fa.fmsi.misc",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "fmsi.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv"
    params:
        pref="fmsi.{g}.S_{S}.k_{k}.d_{d}",
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count index_bytes
        printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'


        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "fmsi" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            $(cat {input.ac} {input.gt} {input.ac_gt} {input.misc} {input.klcp} {input.mask} | wc -c)
        printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """

        


#####################################################################################################
# RUN PROPHASM + BWA
#####################################################################################################

rule run_prophasm:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        log0=f"06_prophasm_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_superstring.log",
    params:
        prophasm=PROPHASM,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.prophasm} -k {wildcards.k} -i <(xzcat {input.fa}) -o {output.fa}"
        """



rule run_bwa:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    output:
        amb="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        log0=f"15_bwa_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_index.log",
    params:
        bwa=BWA,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.bwa} index {input.fa}"
        """

rule run_bwa_query_pos:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        amb="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    output:
        logPos=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Pos.log",
    params:
        bwa=BWA,
        w=BWA_PARAM_W,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.qPos} >/dev/null"
        """

rule run_bwa_query_neg:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        amb="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    output:
        logNeg=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Neg.log",
    params:
        bwa=BWA,
        w=BWA_PARAM_W,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.qNeg} >/dev/null"
        """

rule run_bwa_query_str:
    input:
        fa="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa",
        amb="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_bwa_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.fa.sa",
        qStr="42_query_fastas/{g}-queries-str.fa",
    output:
        logStr=f"16_bwa_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_prophasm.k_{k}.d_na.t_Str.log",
    params:
        bwa=BWA,
        w=BWA_PARAM_W,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logStr}" \\
            "{params.bwa} fastmap -l {wildcards.k} -w {params.w} {input.fa} {input.qStr} >/dev/null"
        """

rule make_BWA_stats:
    input:
        amb="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.amb",
        ann="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.ann",
        bwt="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.bwt",
        pac="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.pac",
        sa="05_prophasm_{I}_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa.sa",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "{I}.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv",
    wildcard_constraints:
        I="prophex|bwa",
    params:
        pref="{I}.{g}.S_{S}.k_{k}.d_{d}",
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count index_bytes
        printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'

        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            {wildcards.I} \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            $(cat {input.amb} {input.ann} {input.bwt} {input.pac} {input.sa} | wc -c)
        printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """

#####################################################################################################
# RUN SSHash on ProphAsm output
#####################################################################################################

# TODO: kmer_cnt_file must be created before running Snakemake...
def GetMinimizerLen4SSHash(wildcards): # using a formula from Giulio
    kmer_cnt_file = f"80_size_stats/{wildcards.g}.r_{wildcards.r}.k_{wildcards.k}.kmerCount"
    with open(kmer_cnt_file) as f:
        kmer_cnt = int(f.readline().strip('\n'))
    return min(math.ceil(math.log(kmer_cnt, 4)) + 1, int(wildcards.k) - 2)

rule run_sshash:
    input:
        fa="05_prophasm_bwa_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
    output:
        index="25_sshash_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.sshash",
        log0=f"26_sshash_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_index.log",
    params:
        sshash=SSHASH,
        tmpinput="25_sshash_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.fa",
        minimizerLen=lambda wildcards: GetMinimizerLen4SSHash(wildcards),
    shell:
        """
        seqtk seq {input.fa} >{params.tmpinput}
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.sshash} build -i {params.tmpinput} -k {wildcards.k} -m {params.minimizerLen} -o {output.index} -s `echo $RANDOM`"
        rm {params.tmpinput}
        """

rule run_sshash_query_pos:
    input:
        index="25_sshash_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.sshash",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    output:
        logPos=f"27_sshash_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Pos.log",
    params:
        sshash=SSHASH,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.sshash} query -i {input.index} -q {input.qPos}"
        """

rule run_sshash_query_neg:
    input:
        index="25_sshash_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.sshash",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    output:
        logNeg=f"27_sshash_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_prophasm.k_{k}.d_na.t_Neg.log",
    params:
        sshash=SSHASH,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.sshash} query -i {input.index} -q {input.qNeg}"
        """

rule run_sshash_query_str:
    input:
        index="25_sshash_index/{g}.r_1.0.S_prophasm.k_{k}.d_na.sshash",
        qStr="42_query_fastas/{g}-queries-str.fa",
    output:
        logStr=f"27_sshash_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_prophasm.k_{k}.d_na.t_Str.log",
    params:
        sshash=SSHASH,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logStr}" \\
            "{params.sshash} query -i {input.index} -q {input.qStr}"
        """

rule make_sshash_stats:
    input:
        index="25_sshash_index/{g}.r_{r}.S_prophasm.k_{k}.d_na.sshash",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "sshash.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv",
    params:
        pref="sshash.{g}.S_{S}.k_{k}.d_{d}",
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count index_bytes
        printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'

        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            SSHash \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            $(cat {input.index} | wc -c)
        printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """


#####################################################################################################
# RUN SBWT
#####################################################################################################

# Two variants
# - d=0: SBWT_VARIANT with param. --add-reverse-complements, which handles reverse complements (RCs)
# - d=1: SBWT_VARIANT_MEM param.  WITHOUT reverse complements; this is supposed to be more memory efficient than the default variant but slower
# Both need the same input file (uncompressed), so both are handled by this rule (can also separate jobs for both runs)
# TODO: rewrite in a more generic way (based on param. d, determine the params for SBWT)
rule build_sbwt:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa.sbwt",
        sbwtStreaming="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa-Streaming.sbwt",
        sbwt_mem="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa.sbwt",
        sbwt_memStreaming="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa-Streaming.sbwt",
        log0=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_index.log",
        log0Streaming=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_indexStreaming.log", # in fact, it's not included in stats now
        log0_mem=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_index.log",
        log0_memStreaming=f"11_sbwt_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_indexStreaing.log", # in fact, it's not included in stats now
    resources:
        sbwtlimit=1, # !!! run <= 1 instance due to excessive disk consumption (on E.coli pan-genome nearly 100 GBs, got 84G for sbwt_tmp_escherichia_coli.k63_subsampled_k23_r0.1.fa)
    params:
        sbwt=SBWT,
        sbwtVariant=SBWT_VARIANT,
        sbwtVariantMem=SBWT_VARIANT_MEM,
        threads=NUM_THREADS,
        memory=SBWT_RAM,
        tmpinput="10_sbwt_index/{g}_subsampled_k{k}_r{r}.fa",
        tmpdir=SBWT_TMP_DIR+"sbwt_tmp_{g}_subsampled_k{k}_r{r}.fa/",
    shell:
        """
        mkdir -p {params.tmpdir}
        xzcat {input.fa} >{params.tmpinput}
        ### TIME EFFICIENT VARIANT
        # no streaming
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwt} --add-reverse-complements --variant {params.sbwtVariant} --no-streaming-support"
        rm -rf {params.tmpdir}*
        # with streaming
        ../../scripts/benchmark.py --log "{output.log0Streaming}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwtStreaming} --add-reverse-complements --variant {params.sbwtVariant}"
        rm -rf {params.tmpdir}*
        ### MEMORY EFFICIENT VARIANT
        # no streaming
        ../../scripts/benchmark.py --log "{output.log0_mem}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwt_mem} --variant {params.sbwtVariantMem} --no-streaming-support"
        rm -rf {params.tmpdir}*
        # with streaming
        ../../scripts/benchmark.py --log "{output.log0_memStreaming}" \\
            "{params.sbwt} build -k {wildcards.k} -t {params.threads} -m {params.memory} -d {params.tmpdir} -i {params.tmpinput} -o {output.sbwt_memStreaming} --variant {params.sbwtVariantMem}"
        rm -rf {params.tmpdir}
        rm -f {params.tmpinput}
        """

rule run_sbwt_query_pos:
    input:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa.sbwt",
        sbwt_mem="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa.sbwt",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
        qPosRCs="42_query_fastas/{g}.r_{r}.k_{k}-queries-wRCs.fa",
    output:
        logPos=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_Pos.log",
        logPosMem=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_Pos.log",
    params:
        sbwt=SBWT,
    shell:
        """
        ### TIME EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.sbwt} search -i {input.sbwt} -q {input.qPos} -o /dev/null"
        ### MEMORY EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logPosMem}" \\
            "{params.sbwt} search -i {input.sbwt_mem} -q {input.qPosRCs} -o /dev/null"
        """

rule run_sbwt_query_neg:
    input:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_0.fa.sbwt",
        sbwt_mem="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_1.fa.sbwt",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg.fa",
        qNegRCs="42_query_fastas/{g}.k_{k}-queries-neg-wRCs.fa",
    output:
        logNeg=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_0.t_Neg.log",
        logNegMem=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_1.t_Neg.log",
    params:
        sbwt=SBWT,
    shell:
        """
        ### TIME EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.sbwt} search -i {input.sbwt} -q {input.qNeg} -o /dev/null"
        ### MEMORY EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logNegMem}" \\
            "{params.sbwt} search -i {input.sbwt_mem} -q {input.qNegRCs} -o /dev/null"
        """

rule run_sbwt_query_str:
    input:
        sbwtStreaming="10_sbwt_index/{g}.r_1.0.S_none.k_{k}.d_0.fa-Streaming.sbwt",
        sbwt_memsStreaming="10_sbwt_index/{g}.r_1.0.S_none.k_{k}.d_1.fa-Streaming.sbwt",
        qStr="42_query_fastas/{g}-queries-str.fa",
        qStrRCs="42_query_fastas/{g}-queries-str-wRCs.fa",
    output:
        logStr=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_none.k_{k}.d_0.t_Str.log",
        logStrMem=f"12_sbwt_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_none.k_{k}.d_1.t_Str.log",
    params:
        sbwt=SBWT,
    shell:
        """
        ### TIME EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logStr}" \\
            "{params.sbwt} search -i {input.sbwtStreaming} -q {input.qStr} -o /dev/null"
        ### MEMORY EFFICIENT VARIANT
        ../../scripts/benchmark.py --log "{output.logStrMem}" \\
            "{params.sbwt} search -i {input.sbwt_memsStreaming} -q {input.qStrRCs} -o /dev/null"
        """

rule make_sbwt_stats:
    input:
        sbwt="10_sbwt_index/{g}.r_{r}.S_none.k_{k}.d_{d}.fa.sbwt",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "sbwt.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv"
    params:
        pref="sbwt.{g}.S_{S}.k_{k}.d_{d}",
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count index_bytes
        printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'

        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "sbwt" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            $(cat {input.sbwt} | wc -c)
        printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """
        # $(cat {input.q} | grep -v ">" | wc -l) \\ 

#####################################################################################################
# RUN CBL directly on the FASTA file
#####################################################################################################

rule run_cbl:
    input:
        fa=f"{SUBSAMPLED_DIR}/" + "{g}_subsampled_k{k}_r{r}.fa.xz",
    output:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        log0=f"21_cbl_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_index.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
        tmpinput="20_cbl_index/{g}_subsampled_k{k}_r{r}.fa",
    shell:
        """
        xzcat {input.fa} >{params.tmpinput}
        ../../scripts/benchmark.py --log "{output.log0}" \\
            "{params.cbl} build -c -o {output.ind} {params.tmpinput}"
        rm -f {params.tmpinput}
        """

rule run_cbl_query_pos:
    input:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        qPos="42_query_fastas/{g}.r_{r}.k_{k}-queries.fa",
    output:
        logPos=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_Pos.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logPos}" \\
            "{params.cbl} query {input.ind} {input.qPos} >/dev/null"
        """

rule run_cbl_query_neg:
    input:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        qNeg="42_query_fastas/{g}.k_{k}-queries-neg.fa",
    output:
        logNeg=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_none.k_{k}.d_na.t_Neg.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logNeg}" \\
            "{params.cbl} query {input.ind} {input.qNeg} >/dev/null"
        """

rule run_cbl_query_str:
    input:
        ind="20_cbl_index/{g}.r_1.0.S_none.k_{k}.d_na.fa.cblIndex",
        qStr="42_query_fastas/{g}-queries-str.fa",
    output:
        logStr=f"22_cbl_query_memtime/{HOSTNAME}/" + "{g}.r_1.0.S_none.k_{k}.d_na.t_Str.log",
    params:
        cbl=CBL_PREF + "{k}" + CBL_SUFF,
    shell:
        """
        ../../scripts/benchmark.py --log "{output.logStr}" \\
            "{params.cbl} query {input.ind} {input.qStr} >/dev/null"
        """

rule make_cbl_stats:
    input:
        ind="20_cbl_index/{g}.r_{r}.S_none.k_{k}.d_na.fa.cblIndex",
        kmerCnt="80_size_stats/{g}.r_{r}.k_{k}.kmerCount",
    output:
        stats=f"80_size_stats/{HOSTNAME}/" + "cbl.{g}.r_{r}.S_{S}.k_{k}.d_{d}.stats.tsv",
    params:
        pref="cbl.{g}.S_{S}.k_{k}.d_{d}",
    priority: 50
    shell:
        """
        (
        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' genome rate I_alg S_alg k d
        printf '\\t'

        #2
        printf '%s\\t%s\\t%s' kmer_count index_bytes
        printf '\\t'

        # final
        printf '%s' pref
        printf '\\n'

        ##################################

        #1
        printf '%s\\t%s\\t%s\\t%s\\t%s\\t%s' \\
            {wildcards.g} \\
            {wildcards.r} \\
            "cbl" \\
            {wildcards.S} \\
            {wildcards.k} \\
            {wildcards.d} 
        printf '\\t'

        #2
        printf '%d\\t%d\\t%d' \\
            $(cat {input.kmerCnt} | xargs echo) \\
            $(cat {input.ind} | wc -c)
        printf '\\t'

        #final
        printf '%s' \\
            {params.pref}
        printf '\\n'

        ) > {output.stats}
        """

#####################################################################################################
# REFORMATTING MEMTIME LOG (for all algs.)
#####################################################################################################

def GetNumQueries(wildcards):
    if wildcards.t == "Pos" or wildcards.t == "Neg":
        return NUM_QUERIES
    elif wildcards.t == "Str":
        return STREAMING_NUM_SEQUENCES * (STREAMING_SEQUENCES_LENGTH - int(wildcards.k) + 1)
    else: # t == index or superstring
        return 0


rule reformat_memtime_logs:
    output:
        "{dir}" + f"_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}.tsv",
    input:
        "{dir}" + f"_memtime/{HOSTNAME}/" + "{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}.log",
    params:
        pref="{g}.r_{r}.S_{S}.k_{k}.d_{d}.t_{t}",
        num_queries=lambda wildcards: GetNumQueries(wildcards),
    priority: 50
    shell:
        """
        (
            printf 'pref\\tgenome\\trate\\tprog\\tS_alg\\tk\\td\\tqType\\tnum_queries\\t'

            cat {input} \\
                | grep real

            printf '%s\\t%s\\t%s\\t%s\\t%s\\t%d\\t%s\\t%s\\t%s\\t' \\
                {params.pref} \\
                {wildcards.g} \\
                {wildcards.r} \\
                {wildcards.dir} \\
                {wildcards.S} \\
                {wildcards.k} \\
                {wildcards.d} \\
                {wildcards.t} \\
                {params.num_queries} \\
            ;

            cat {input} \\
                | grep -Ev '(real|#)'

        ) > {output}
        """


#####################################################################################################
# GET HW INFO ABOUT THE CURRENT COMPUTER
#####################################################################################################


rule add_hw_info:
    output:
        hw=f"00_hw_info/{HOSTNAME}.txt",
    priority: 50
    shell:
        """
        ../../scripts/print_hw_info.sh > {output.hw}
        """
